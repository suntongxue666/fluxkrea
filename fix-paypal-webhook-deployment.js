/**
 * ‰øÆÂ§çPayPal WebhookÈÉ®ÁΩ≤ÈóÆÈ¢ò
 * Ê†∏ÂøÉÈóÆÈ¢òÔºöPayPal webhookÊ≤°ÊúâË¢´Ë∞ÉÁî®ÔºåÂØºËá¥ÁßØÂàÜÊó†Ê≥ïÂÖÖÂÄº
 */
const { createClient } = require('@supabase/supabase-js');

// SupabaseÈÖçÁΩÆ
const supabaseUrl = 'https://gdcjvqaqgvcxzufmessy.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdkY2p2cWFxZ3ZjeHp1Zm1lc3N5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQyMDY2NTEsImV4cCI6MjA2OTc4MjY1MX0.wIblNpUZLgQcCJCVbKfae5n0jtcIshL9asVIit6iUBI';
const supabase = createClient(supabaseUrl, supabaseKey);

async function fixPayPalWebhookDeployment() {
    console.log('üö® ‰øÆÂ§çPayPal WebhookÈÉ®ÁΩ≤ÈóÆÈ¢ò\n');
    
    console.log('üéØ ÈóÆÈ¢òÂàÜÊûê:');
    console.log('‚úÖ PayPal webhookÂ§ÑÁêÜÈÄªËæëÊ≠£Á°ÆÔºàapi/paypal-webhook.jsÔºâ');
    console.log('‚úÖ ÁßØÂàÜÊõ¥Êñ∞ÈÄªËæëÊ≠£Á°ÆÔºàhandleSubscriptionActivatedÂáΩÊï∞Ôºâ');
    console.log('‚úÖ Êï∞ÊçÆÂ∫ìË°®ÁªìÊûÑÊ≠£Á°Æ');
    console.log('‚ùå PayPal webhookÊ≤°ÊúâË¢´Ë∞ÉÁî®Ôºà0‰∏™webhook‰∫ã‰ª∂ËÆ∞ÂΩïÔºâ');
    console.log('‚ùå Áî®Êà∑Ë¥≠‰π∞ÂêéÁßØÂàÜÊ≤°ÊúâÂ¢ûÂä†');
    console.log('');
    
    console.log('üîç Ê†πÊú¨ÂéüÂõ†:');
    console.log('1. Â∫îÁî®ÂèØËÉΩÊ≤°ÊúâÈÉ®ÁΩ≤Âà∞ÂÖ¨ÁΩëÂèØËÆøÈóÆÁöÑURL');
    console.log('2. PayPalÂºÄÂèëËÄÖÊéßÂà∂Âè∞ÁöÑwebhook URLÈÖçÁΩÆÈîôËØØ');
    console.log('3. webhookÁ´ØÁÇπÊó†Ê≥ïË¢´PayPalËÆøÈóÆ');
    console.log('');
    
    // 1. Ê£ÄÊü•ÂΩìÂâçÈÉ®ÁΩ≤Áä∂ÊÄÅ
    console.log('üìã 1. Ê£ÄÊü•ÂΩìÂâçÈÉ®ÁΩ≤Áä∂ÊÄÅ...');
    await checkDeploymentStatus();
    
    // 2. Êèê‰æõÁ´ãÂç≥‰øÆÂ§çÊñπÊ°à
    console.log('\nüìã 2. Á´ãÂç≥‰øÆÂ§çÊñπÊ°à...');
    await provideImmediateFix();
    
    // 3. ÂàõÂª∫ÊµãËØïÂ∑•ÂÖ∑
    console.log('\nüìã 3. ÂàõÂª∫ÊµãËØïÂ∑•ÂÖ∑...');
    setupTestingTools();
    
    // 4. Êèê‰æõÈÉ®ÁΩ≤ÊåáÂçó
    console.log('\nüìã 4. ÈÉ®ÁΩ≤ÊåáÂçó...');
    provideDeploymentGuide();
    
    console.log('\n‚úÖ ‰øÆÂ§çÊñπÊ°àÂ∑≤ÂáÜÂ§áÂÆåÊàêÔºÅ');
    console.log('\nüö® Á´ãÂç≥Ë°åÂä®:');
    console.log('1. ÈÉ®ÁΩ≤Â∫îÁî®Âà∞Vercel');
    console.log('2. ÈÖçÁΩÆPayPal webhook');
    console.log('3. ÊµãËØïË¥≠‰π∞ÊµÅÁ®ã');
    console.log('4. ÊâãÂä®‰øÆÂ§çÁé∞ÊúâÁî®Êà∑');
}

// Ê£ÄÊü•ÈÉ®ÁΩ≤Áä∂ÊÄÅ
async function checkDeploymentStatus() {
    console.log('üîç Ê£ÄÊü•Â∫îÁî®ÈÉ®ÁΩ≤Áä∂ÊÄÅ...');
    
    // Â∞ùËØïËÆøÈóÆÂèØËÉΩÁöÑwebhookÁ´ØÁÇπ
    const possibleUrls = [
        'http://localhost:3000/api/paypal-webhook',
        'https://flux-krea-ai.vercel.app/api/paypal-webhook',
        'https://your-app.vercel.app/api/paypal-webhook'
    ];
    
    let workingUrl = null;
    
    for (const url of possibleUrls) {
        try {
            console.log(`ÊµãËØï: ${url}`);
            const response = await fetch(url, { 
                method: 'GET',
                timeout: 5000 
            });
            
            if (response.ok) {
                const data = await response.json();
                console.log(`‚úÖ ${url} ÂèØËÆøÈóÆ`);
                console.log(`   Áä∂ÊÄÅ: ${data.status}`);
                workingUrl = url;
                break;
            } else {
                console.log(`‚ùå ${url} ÂìçÂ∫îÂºÇÂ∏∏: ${response.status}`);
            }
        } catch (error) {
            console.log(`‚ùå ${url} Êó†Ê≥ïËÆøÈóÆ: ${error.message}`);
        }
    }
    
    if (workingUrl) {
        console.log(`\n‚úÖ ÊâæÂà∞ÂèØÁî®ÁöÑwebhookÁ´ØÁÇπ: ${workingUrl}`);
        console.log('   ÈúÄË¶ÅÂú®PayPalÂºÄÂèëËÄÖÊéßÂà∂Âè∞ÈÖçÁΩÆÊ≠§URL');
    } else {
        console.log('\n‚ùå Ê≤°ÊúâÊâæÂà∞ÂèØÁî®ÁöÑwebhookÁ´ØÁÇπ');
        console.log('   ÈúÄË¶ÅÁ´ãÂç≥ÈÉ®ÁΩ≤Â∫îÁî®Âà∞ÂÖ¨ÁΩë');
    }
    
    return workingUrl;
}

// Êèê‰æõÁ´ãÂç≥‰øÆÂ§çÊñπÊ°à
async function provideImmediateFix() {
    console.log('üîß Á´ãÂç≥‰øÆÂ§çÊñπÊ°à...');
    
    // Êü•ÊâæÈúÄË¶Å‰øÆÂ§çÁöÑÁî®Êà∑
    const { data: lowCreditUsers, error } = await supabase
        .from('users')
        .select('*')
        .lt('credits', 50)
        .not('email', 'is', null)
        .order('created_at', { ascending: false })
        .limit(10);
    
    if (error) {
        console.log('‚ùå Êü•ËØ¢Áî®Êà∑Â§±Ë¥•:', error.message);
        return;
    }
    
    if (lowCreditUsers && lowCreditUsers.length > 0) {
        console.log(`‚ö†Ô∏è ÂèëÁé∞ ${lowCreditUsers.length} ‰∏™ÂèØËÉΩÈúÄË¶ÅÁßØÂàÜË°•ÂÖÖÁöÑÁî®Êà∑:`);
        
        lowCreditUsers.forEach((user, index) => {
            console.log(`  ${index + 1}. ${user.email} - ${user.credits} ÁßØÂàÜ`);
        });
        
        console.log('\nüí° Â¶ÇÊûúËøô‰∫õÁî®Êà∑Ë¥≠‰π∞‰∫ÜËÆ¢ÈòÖ‰ΩÜÊ≤°Êî∂Âà∞ÁßØÂàÜÔºå‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§‰øÆÂ§ç:');
        lowCreditUsers.forEach((user, index) => {
            console.log(`// Áî®Êà∑ ${index + 1}: ${user.email}`);
            console.log(`await emergencyAddCredits("${user.email}", 1000); // Pro Plan`);
            console.log(`await emergencyAddCredits("${user.email}", 5000); // Max Plan`);
            console.log('');
        });
    } else {
        console.log('‚úÖ Ê≤°ÊúâÂèëÁé∞ÊòéÊòæÈúÄË¶Å‰øÆÂ§çÁöÑÁî®Êà∑');
    }
    
    // ÂØºÂá∫‰øÆÂ§çÂáΩÊï∞
    global.emergencyAddCredits = emergencyAddCredits;
    global.testWebhookManually = testWebhookManually;
    global.checkUserPurchaseHistory = checkUserPurchaseHistory;
}

// ËÆæÁΩÆÊµãËØïÂ∑•ÂÖ∑
function setupTestingTools() {
    console.log('üõ†Ô∏è ËÆæÁΩÆÊµãËØïÂ∑•ÂÖ∑...');
    
    global.testPayPalWebhook = testPayPalWebhook;
    global.simulateSubscriptionPurchase = simulateSubscriptionPurchase;
    global.verifyWebhookEndpoint = verifyWebhookEndpoint;
    
    console.log('‚úÖ ÊµãËØïÂ∑•ÂÖ∑Â∑≤ËÆæÁΩÆ:');
    console.log('- testPayPalWebhook() - ÊµãËØïwebhookÁ´ØÁÇπ');
    console.log('- simulateSubscriptionPurchase(userEmail, planType) - Ê®°ÊãüË¥≠‰π∞');
    console.log('- verifyWebhookEndpoint(url) - È™åËØÅÁ´ØÁÇπÂèØËÆøÈóÆÊÄß');
}

// Êèê‰æõÈÉ®ÁΩ≤ÊåáÂçó
function provideDeploymentGuide() {
    console.log('üìã ÂÆåÊï¥ÈÉ®ÁΩ≤ÊåáÂçó:');
    console.log('');
    console.log('üöÄ Ê≠•È™§1: ÈÉ®ÁΩ≤Âà∞Vercel');
    console.log('1. Á°Æ‰øù‰ª£Á†ÅÂ∑≤Êé®ÈÄÅÂà∞GitHub');
    console.log('2. ÁôªÂΩï https://vercel.com/');
    console.log('3. ÁÇπÂáª "New Project"');
    console.log('4. ËøûÊé•GitHub‰ªìÂ∫ì');
    console.log('5. ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáè:');
    console.log('   - SUPABASE_URL: https://gdcjvqaqgvcxzufmessy.supabase.co');
    console.log('   - SUPABASE_ANON_KEY: (‰Ω†ÁöÑSupabaseÂØÜÈí•)');
    console.log('   - PAYPAL_CLIENT_ID: (‰Ω†ÁöÑPayPalÂÆ¢Êà∑Á´ØID)');
    console.log('   - PAYPAL_CLIENT_SECRET: (‰Ω†ÁöÑPayPalÂÆ¢Êà∑Á´ØÂØÜÈí•)');
    console.log('6. ÁÇπÂáª "Deploy"');
    console.log('');
    
    console.log('üîó Ê≠•È™§2: ÈÖçÁΩÆPayPal Webhook');
    console.log('1. ÁôªÂΩï https://developer.paypal.com/');
    console.log('2. ËøõÂÖ•‰Ω†ÁöÑÂ∫îÁî®ËÆæÁΩÆ');
    console.log('3. ÊâæÂà∞ "Webhooks" ÈÉ®ÂàÜ');
    console.log('4. ÁÇπÂáª "Add Webhook"');
    console.log('5. ËæìÂÖ•Webhook URL: https://your-app.vercel.app/api/paypal-webhook');
    console.log('6. ÈÄâÊã©‰∫ã‰ª∂Á±ªÂûã: BILLING.SUBSCRIPTION.ACTIVATED');
    console.log('7. ‰øùÂ≠òÈÖçÁΩÆ');
    console.log('');
    
    console.log('üß™ Ê≠•È™§3: ÊµãËØï');
    console.log('1. ËÆøÈóÆ‰Ω†ÁöÑÂ∫îÁî®');
    console.log('2. ÊµãËØïÁî®Êà∑Ê≥®ÂÜåÂíåÁôªÂΩï');
    console.log('3. ÊµãËØïË¥≠‰π∞ËÆ¢ÈòÖÊµÅÁ®ã');
    console.log('4. Ê£ÄÊü•ÁßØÂàÜÊòØÂê¶Ê≠£Á°ÆÂ¢ûÂä†');
    console.log('5. Êü•ÁúãVercelÊó•ÂøóÁ°ÆËÆ§webhookË¢´Ë∞ÉÁî®');
    console.log('');
    
    console.log('üîß Ê≠•È™§4: ‰øÆÂ§çÁé∞ÊúâÁî®Êà∑');
    console.log('1. ËØÜÂà´Ë¥≠‰π∞‰∫ÜËÆ¢ÈòÖ‰ΩÜÊ≤°Êî∂Âà∞ÁßØÂàÜÁöÑÁî®Êà∑');
    console.log('2. ‰ΩøÁî® emergencyAddCredits ÂáΩÊï∞ÊâãÂä®Ê∑ªÂä†ÁßØÂàÜ');
    console.log('3. ÈÄöÁü•Áî®Êà∑ÁßØÂàÜÂ∑≤Âà∞Ë¥¶');
}

// Á¥ßÊÄ•Ê∑ªÂä†ÁßØÂàÜ
async function emergencyAddCredits(userEmail, credits) {
    try {
        console.log(`üö® Á¥ßÊÄ•‰∏∫ ${userEmail} Ê∑ªÂä† ${credits} ÁßØÂàÜ...`);
        
        const { data: users, error: userError } = await supabase
            .from('users')
            .select('*')
            .eq('email', userEmail);
        
        if (userError || !users || users.length === 0) {
            console.log('‚ùå Êâæ‰∏çÂà∞Áî®Êà∑:', userEmail);
            return false;
        }
        
        const user = users[0];
        const currentCredits = user.credits || 0;
        const newCredits = currentCredits + credits;
        
        // Êõ¥Êñ∞ÁßØÂàÜ
        const { error: updateError } = await supabase
            .from('users')
            .update({
                credits: newCredits,
                subscription_status: 'ACTIVE',
                updated_at: new Date().toISOString()
            })
            .eq('id', user.id);
        
        if (updateError) {
            console.log('‚ùå Êõ¥Êñ∞Â§±Ë¥•:', updateError.message);
            return false;
        }
        
        // ËÆ∞ÂΩï‰∫§Êòì
        const { error: transError } = await supabase
            .from('credit_transactions')
            .insert({
                user_uuid: user.uuid,
                transaction_type: 'EARN',
                amount: credits,
                balance_after: newCredits,
                description: 'ËÆ¢ÈòÖÁßØÂàÜË°•ÂÖÖ - ÊâãÂä®‰øÆÂ§ç',
                source: 'manual_fix'
            });
        
        if (transError) {
            console.log('‚ö†Ô∏è ‰∫§ÊòìËÆ∞ÂΩïÂ§±Ë¥•:', transError.message);
        }
        
        console.log(`‚úÖ ÊàêÂäüÔºÅ${userEmail} Áé∞Âú®Êúâ ${newCredits} ÁßØÂàÜ`);
        
        // ÂàõÂª∫ËÆ¢ÈòÖËÆ∞ÂΩï
        const planType = credits >= 5000 ? 'MAX' : 'PRO';
        const planId = credits >= 5000 ? 'P-3NJ78684DS796242VNCJBKQQ' : 'P-5S785818YS7424947NCJBKQA';
        
        const { error: subError } = await supabase
            .from('user_subscriptions')
            .insert({
                google_user_id: user.uuid,
                google_user_email: userEmail,
                paypal_subscription_id: `MANUAL-${Date.now()}`,
                plan_id: planId,
                plan_type: planType,
                status: 'ACTIVE'
            });
        
        if (subError) {
            console.log('‚ö†Ô∏è ËÆ¢ÈòÖËÆ∞ÂΩïÂàõÂª∫Â§±Ë¥•:', subError.message);
        } else {
            console.log(`‚úÖ Â∑≤ÂàõÂª∫ ${planType} ËÆ¢ÈòÖËÆ∞ÂΩï`);
        }
        
        return true;
        
    } catch (error) {
        console.log('‚ùå Â§±Ë¥•:', error.message);
        return false;
    }
}

// ÊâãÂä®ÊµãËØïwebhook
async function testWebhookManually(userEmail, planType = 'pro') {
    try {
        console.log(`üß™ ÊâãÂä®ÊµãËØïwebhook: ${userEmail}, ${planType}...`);
        
        const { data: users } = await supabase
            .from('users')
            .select('*')
            .eq('email', userEmail);
        
        if (!users || users.length === 0) {
            console.log('‚ùå Êâæ‰∏çÂà∞Áî®Êà∑');
            return;
        }
        
        const user = users[0];
        const credits = planType === 'pro' ? 1000 : 5000;
        const planId = planType === 'pro' ? 'P-5S785818YS7424947NCJBKQA' : 'P-3NJ78684DS796242VNCJBKQQ';
        
        // Ê®°ÊãüwebhookÊï∞ÊçÆ
        const webhookData = {
            event_type: 'BILLING.SUBSCRIPTION.ACTIVATED',
            resource: {
                id: `I-MANUAL-${Date.now()}`,
                plan_id: planId,
                custom_id: JSON.stringify({
                    user_id: user.uuid,
                    email: user.email
                })
            }
        };
        
        console.log('Ê®°ÊãüwebhookÊï∞ÊçÆ:', JSON.stringify(webhookData, null, 2));
        
        // Áõ¥Êé•Ë∞ÉÁî®Â§ÑÁêÜÈÄªËæë
        await processWebhookLocally(webhookData);
        
    } catch (error) {
        console.log('‚ùå ÊµãËØïÂ§±Ë¥•:', error.message);
    }
}

// Êú¨Âú∞Â§ÑÁêÜwebhook
async function processWebhookLocally(webhookData) {
    const { event_type, resource } = webhookData;
    
    if (event_type !== 'BILLING.SUBSCRIPTION.ACTIVATED') {
        console.log('‚ö†Ô∏è ÈùûËÆ¢ÈòÖÊøÄÊ¥ª‰∫ã‰ª∂');
        return;
    }
    
    const planDetails = {
        'P-5S785818YS7424947NCJBKQA': { name: 'Pro Plan', credits: 1000 },
        'P-3NJ78684DS796242VNCJBKQQ': { name: 'Max Plan', credits: 5000 }
    };
    
    const plan = planDetails[resource.plan_id];
    if (!plan) {
        console.log('‚ùå Êú™Áü•ËÆ°ÂàíID:', resource.plan_id);
        return;
    }
    
    const userInfo = JSON.parse(resource.custom_id);
    
    // Êü•ÊâæÁî®Êà∑
    const { data: users } = await supabase
        .from('users')
        .select('*')
        .eq('uuid', userInfo.user_id);
    
    if (!users || users.length === 0) {
        console.log('‚ùå Êâæ‰∏çÂà∞Áî®Êà∑:', userInfo.user_id);
        return;
    }
    
    const user = users[0];
    const newCredits = (user.credits || 0) + plan.credits;
    
    // Êõ¥Êñ∞ÁßØÂàÜ
    const { error: updateError } = await supabase
        .from('users')
        .update({
            credits: newCredits,
            subscription_status: 'ACTIVE',
            updated_at: new Date().toISOString()
        })
        .eq('id', user.id);
    
    if (updateError) {
        console.log('‚ùå Êõ¥Êñ∞Â§±Ë¥•:', updateError.message);
        return;
    }
    
    // ËÆ∞ÂΩï‰∫§Êòì
    await supabase
        .from('credit_transactions')
        .insert({
            user_uuid: user.uuid,
            transaction_type: 'EARN',
            amount: plan.credits,
            balance_after: newCredits,
            description: `${plan.name}ËÆ¢ÈòÖÊøÄÊ¥ª`,
            source: 'manual_webhook_test'
        });
    
    // ËÆ∞ÂΩïwebhook‰∫ã‰ª∂
    await supabase
        .from('webhook_events')
        .insert({
            event_type: event_type,
            resource_id: resource.id,
            resource_data: resource,
            status: 'processed'
        });
    
    console.log(`‚úÖ ÊàêÂäüÂ§ÑÁêÜËÆ¢ÈòÖÊøÄÊ¥ª: ${user.email} Ëé∑Âæó ${plan.credits} ÁßØÂàÜ`);
}

// ÊµãËØïPayPal webhook
async function testPayPalWebhook() {
    console.log('üß™ ÊµãËØïPayPal webhookÁ´ØÁÇπ...');
    
    const testUrl = 'https://your-app.vercel.app/api/paypal-webhook';
    
    try {
        const response = await fetch(testUrl, { method: 'GET' });
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ WebhookÁ´ØÁÇπÊ≠£Â∏∏');
            console.log('ÂìçÂ∫î:', data);
        } else {
            console.log('‚ùå WebhookÁ´ØÁÇπÂºÇÂ∏∏:', response.status);
        }
    } catch (error) {
        console.log('‚ùå Êó†Ê≥ïËÆøÈóÆwebhookÁ´ØÁÇπ:', error.message);
    }
}

// Ê®°ÊãüËÆ¢ÈòÖË¥≠‰π∞
async function simulateSubscriptionPurchase(userEmail, planType = 'pro') {
    console.log(`üõí Ê®°Êãü ${userEmail} Ë¥≠‰π∞ ${planType.toUpperCase()} ËÆ¢ÈòÖ...`);
    
    const credits = planType === 'pro' ? 1000 : 5000;
    const success = await emergencyAddCredits(userEmail, credits);
    
    if (success) {
        console.log(`‚úÖ Ê®°ÊãüË¥≠‰π∞ÊàêÂäüÔºÅÁî®Êà∑Ëé∑Âæó ${credits} ÁßØÂàÜ`);
    } else {
        console.log('‚ùå Ê®°ÊãüË¥≠‰π∞Â§±Ë¥•');
    }
    
    return success;
}

// È™åËØÅwebhookÁ´ØÁÇπ
async function verifyWebhookEndpoint(url) {
    try {
        console.log(`üîç È™åËØÅwebhookÁ´ØÁÇπ: ${url}`);
        
        const response = await fetch(url, { 
            method: 'GET',
            timeout: 10000 
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Á´ØÁÇπÂèØËÆøÈóÆ');
            console.log('ÂìçÂ∫î:', data);
            return true;
        } else {
            console.log(`‚ùå Á´ØÁÇπÂìçÂ∫îÂºÇÂ∏∏: ${response.status}`);
            return false;
        }
    } catch (error) {
        console.log(`‚ùå Á´ØÁÇπÊó†Ê≥ïËÆøÈóÆ: ${error.message}`);
        return false;
    }
}

// Ê£ÄÊü•Áî®Êà∑Ë¥≠‰π∞ÂéÜÂè≤
async function checkUserPurchaseHistory(userEmail) {
    try {
        console.log(`üîç Ê£ÄÊü• ${userEmail} ÁöÑË¥≠‰π∞ÂéÜÂè≤...`);
        
        const { data: user } = await supabase
            .from('users')
            .select('*')
            .eq('email', userEmail)
            .single();
        
        if (!user) {
            console.log('‚ùå Êâæ‰∏çÂà∞Áî®Êà∑');
            return;
        }
        
        console.log('Áî®Êà∑‰ø°ÊÅØ:');
        console.log(`- ÈÇÆÁÆ±: ${user.email}`);
        console.log(`- ÁßØÂàÜ: ${user.credits}`);
        console.log(`- ËÆ¢ÈòÖÁä∂ÊÄÅ: ${user.subscription_status}`);
        console.log(`- ÂàõÂª∫Êó∂Èó¥: ${user.created_at}`);
        
        // Ê£ÄÊü•‰∫§ÊòìËÆ∞ÂΩï
        const { data: transactions } = await supabase
            .from('credit_transactions')
            .select('*')
            .eq('user_uuid', user.uuid)
            .order('created_at', { ascending: false });
        
        if (transactions && transactions.length > 0) {
            console.log('\n‰∫§ÊòìËÆ∞ÂΩï:');
            transactions.forEach((trans, index) => {
                console.log(`  ${index + 1}. ${trans.transaction_type} ${trans.amount} - ${trans.description}`);
                console.log(`     Êó∂Èó¥: ${trans.created_at}`);
            });
        } else {
            console.log('\n‚ö†Ô∏è Ê≤°Êúâ‰∫§ÊòìËÆ∞ÂΩï');
        }
        
        // Ê£ÄÊü•ËÆ¢ÈòÖËÆ∞ÂΩï
        const { data: subscriptions } = await supabase
            .from('user_subscriptions')
            .select('*')
            .eq('google_user_email', userEmail);
        
        if (subscriptions && subscriptions.length > 0) {
            console.log('\nËÆ¢ÈòÖËÆ∞ÂΩï:');
            subscriptions.forEach((sub, index) => {
                console.log(`  ${index + 1}. ${sub.plan_type} - ${sub.status}`);
                console.log(`     PayPal ID: ${sub.paypal_subscription_id}`);
                console.log(`     Êó∂Èó¥: ${sub.created_at}`);
            });
        } else {
            console.log('\n‚ö†Ô∏è Ê≤°ÊúâËÆ¢ÈòÖËÆ∞ÂΩï');
        }
        
    } catch (error) {
        console.log('‚ùå Ê£ÄÊü•Â§±Ë¥•:', error.message);
    }
}

// ÊâßË°å‰øÆÂ§ç
fixPayPalWebhookDeployment().catch(error => {
    console.error('‚ùå ‰øÆÂ§çÂ§±Ë¥•:', error);
    process.exit(1);
});