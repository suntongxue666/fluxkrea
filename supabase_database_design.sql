-- Flux Krea AI Supabase 数据库设计
-- 创建日期: 2025-08-03

-- ============================================
-- 1. 用户表 (users)
-- ============================================
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uuid VARCHAR(255) UNIQUE NOT NULL,  -- 前端生成的用户UUID
    user_identifier VARCHAR(500) UNIQUE,  -- 复合用户标识 (uuid_fingerprint_ip)
    fingerprint TEXT,  -- 浏览器指纹
    ip_address VARCHAR(45),  -- 用户IP地址
    user_agent TEXT,  -- 用户浏览器信息
    language VARCHAR(10),  -- 用户语言
    platform VARCHAR(50),  -- 用户平台
    timezone VARCHAR(100),  -- 用户时区
    screen_resolution VARCHAR(20),  -- 屏幕分辨率
    canvas_fingerprint TEXT,  -- Canvas指纹
    
    -- 积分相关
    credits INTEGER DEFAULT 20,  -- 当前积分余额
    total_credits_earned INTEGER DEFAULT 20,  -- 总共获得的积分
    total_credits_used INTEGER DEFAULT 0,  -- 总共使用的积分
    
    -- 登录状态
    is_signed_in BOOLEAN DEFAULT FALSE,  -- 是否已登录
    google_id VARCHAR(255),  -- Google登录ID
    email VARCHAR(255),  -- 邮箱
    name VARCHAR(255),  -- 用户名
    avatar_url TEXT,  -- 头像URL
    
    -- 统计信息
    images_generated INTEGER DEFAULT 0,  -- 生成图片总数
    last_generation_at TIMESTAMP WITH TIME ZONE,  -- 最后生成时间
    daily_generation_count INTEGER DEFAULT 0,  -- 当日生成次数
    daily_reset_date DATE DEFAULT CURRENT_DATE,  -- 每日重置日期
    
    -- 时间戳
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_seen_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 创建索引
CREATE INDEX idx_users_uuid ON users(uuid);
CREATE INDEX idx_users_user_identifier ON users(user_identifier);
CREATE INDEX idx_users_google_id ON users(google_id);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_created_at ON users(created_at);
CREATE INDEX idx_users_last_seen_at ON users(last_seen_at);

-- ============================================
-- 2. 积分记录表 (credit_transactions)
-- ============================================
CREATE TABLE credit_transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
    user_uuid VARCHAR(255) NOT NULL,  -- 用于关联用户
    
    -- 交易信息
    transaction_type VARCHAR(20) NOT NULL CHECK (transaction_type IN ('EARN', 'SPEND', 'REFUND', 'BONUS', 'DAILY_GRANT')),
    amount INTEGER NOT NULL,  -- 积分数量（正数为获得，负数为消费）
    balance_after INTEGER NOT NULL,  -- 交易后余额
    
    -- 交易描述
    description TEXT,  -- 交易描述
    source VARCHAR(50),  -- 积分来源 (generation, daily_bonus, signup_bonus, refund, etc.)
    related_resource_type VARCHAR(50),  -- 相关资源类型 (image_generation, etc.)
    related_resource_id BIGINT,  -- 相关资源ID
    
    -- 时间戳
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 创建索引
CREATE INDEX idx_credit_transactions_user_id ON credit_transactions(user_id);
CREATE INDEX idx_credit_transactions_user_uuid ON credit_transactions(user_uuid);
CREATE INDEX idx_credit_transactions_type ON credit_transactions(transaction_type);
CREATE INDEX idx_credit_transactions_created_at ON credit_transactions(created_at);
CREATE INDEX idx_credit_transactions_source ON credit_transactions(source);

-- ============================================
-- 3. 图像生成记录表 (image_generations)
-- ============================================
CREATE TABLE image_generations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
    user_uuid VARCHAR(255) NOT NULL,  -- 用于关联用户
    
    -- 生成参数
    prompt TEXT NOT NULL,  -- 用户输入的提示词
    negative_prompt TEXT,  -- 负面提示词
    image_size VARCHAR(20) DEFAULT '1024x1024',  -- 图像尺寸
    inference_steps INTEGER DEFAULT 4,  -- 推理步数
    seed INTEGER,  -- 随机种子
    model_version VARCHAR(50) DEFAULT 'flux.1-krea-dev',  -- 模型版本
    
    -- 生成结果
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'cancelled')),
    image_url TEXT,  -- 生成的图像URL
    thumbnail_url TEXT,  -- 缩略图URL
    generation_time_ms INTEGER,  -- 生成耗时（毫秒）
    error_message TEXT,  -- 错误信息
    
    -- 成本统计
    credits_cost INTEGER DEFAULT 10,  -- 消耗的积分
    was_refunded BOOLEAN DEFAULT FALSE,  -- 是否已退款
    
    -- API相关
    api_request_id VARCHAR(255),  -- API请求ID
    api_provider VARCHAR(50) DEFAULT 'replicate',  -- API提供商
    api_response TEXT,  -- API响应（JSON格式）
    
    -- 用户操作
    is_favorited BOOLEAN DEFAULT FALSE,  -- 是否收藏
    is_shared BOOLEAN DEFAULT FALSE,  -- 是否分享
    download_count INTEGER DEFAULT 0,  -- 下载次数
    
    -- 内容审核
    moderation_status VARCHAR(20) DEFAULT 'pending' CHECK (moderation_status IN ('pending', 'approved', 'rejected', 'flagged')),
    moderation_note TEXT,  -- 审核备注
    
    -- 时间戳
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    completed_at TIMESTAMP WITH TIME ZONE
);

-- 创建索引
CREATE INDEX idx_image_generations_user_id ON image_generations(user_id);
CREATE INDEX idx_image_generations_user_uuid ON image_generations(user_uuid);
CREATE INDEX idx_image_generations_status ON image_generations(status);
CREATE INDEX idx_image_generations_created_at ON image_generations(created_at);
CREATE INDEX idx_image_generations_completed_at ON image_generations(completed_at);
CREATE INDEX idx_image_generations_is_favorited ON image_generations(is_favorited);
CREATE INDEX idx_image_generations_moderation_status ON image_generations(moderation_status);

-- ============================================
-- 4. 系统配置表 (system_settings)
-- ============================================
CREATE TABLE system_settings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    key VARCHAR(100) UNIQUE NOT NULL,
    value TEXT,
    description TEXT,
    data_type VARCHAR(20) DEFAULT 'string' CHECK (data_type IN ('string', 'integer', 'boolean', 'json')),
    is_public BOOLEAN DEFAULT FALSE,  -- 是否可以被前端访问
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 插入默认系统配置
INSERT INTO system_settings (key, value, description, data_type, is_public) VALUES
('default_credits', '20', '新用户默认积分', 'integer', true),
('generation_cost', '10', '单次生成消耗积分', 'integer', true),
('daily_free_credits', '5', '每日免费积分', 'integer', true),
('max_daily_generations', '10', '每日最大生成次数', 'integer', true),
('api_rate_limit', '60', '每分钟API调用限制', 'integer', false),
('maintenance_mode', 'false', '维护模式', 'boolean', true),
('welcome_message', 'Welcome to Flux Krea AI!', '欢迎信息', 'string', true);

-- ============================================
-- 5. 每日统计表 (daily_stats)
-- ============================================
CREATE TABLE daily_stats (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date DATE NOT NULL,
    
    -- 用户统计
    new_users INTEGER DEFAULT 0,
    active_users INTEGER DEFAULT 0,
    returning_users INTEGER DEFAULT 0,
    
    -- 生成统计
    total_generations INTEGER DEFAULT 0,
    successful_generations INTEGER DEFAULT 0,
    failed_generations INTEGER DEFAULT 0,
    
    -- 积分统计
    credits_earned INTEGER DEFAULT 0,
    credits_spent INTEGER DEFAULT 0,
    credits_refunded INTEGER DEFAULT 0,
    
    -- 系统统计
    api_calls INTEGER DEFAULT 0,
    average_generation_time_ms INTEGER DEFAULT 0,
    error_rate DECIMAL(5,4) DEFAULT 0,
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(date)
);

-- 创建索引
CREATE INDEX idx_daily_stats_date ON daily_stats(date);

-- ============================================
-- 6. 触发器和函数
-- ============================================

-- 更新 updated_at 字段的触发器函数
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 为需要的表创建 updated_at 触发器
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_image_generations_updated_at BEFORE UPDATE ON image_generations FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_system_settings_updated_at BEFORE UPDATE ON system_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_daily_stats_updated_at BEFORE UPDATE ON daily_stats FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- 每日重置用户生成次数的函数
CREATE OR REPLACE FUNCTION reset_daily_generation_counts()
RETURNS void AS $$
BEGIN
    UPDATE users 
    SET daily_generation_count = 0, 
        daily_reset_date = CURRENT_DATE
    WHERE daily_reset_date < CURRENT_DATE;
END;
$$ LANGUAGE plpgsql;

-- ============================================
-- 7. RLS (Row Level Security) 策略
-- ============================================

-- 启用RLS
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE credit_transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE image_generations ENABLE ROW LEVEL SECURITY;

-- 用户只能访问自己的数据
CREATE POLICY "Users can view own data" ON users FOR SELECT USING (uuid = current_setting('app.current_user_uuid', true));
CREATE POLICY "Users can update own data" ON users FOR UPDATE USING (uuid = current_setting('app.current_user_uuid', true));

-- 积分交易记录策略
CREATE POLICY "Users can view own transactions" ON credit_transactions FOR SELECT USING (user_uuid = current_setting('app.current_user_uuid', true));

-- 图像生成记录策略
CREATE POLICY "Users can view own generations" ON image_generations FOR SELECT USING (user_uuid = current_setting('app.current_user_uuid', true));
CREATE POLICY "Users can update own generations" ON image_generations FOR UPDATE USING (user_uuid = current_setting('app.current_user_uuid', true));

-- ============================================
-- 8. 视图
-- ============================================

-- 用户统计视图
CREATE VIEW user_stats AS
SELECT 
    u.id,
    u.uuid,
    u.credits,
    u.images_generated,
    u.created_at,
    u.last_seen_at,
    COUNT(ig.id) as total_generations,
    COUNT(CASE WHEN ig.status = 'completed' THEN 1 END) as successful_generations,
    COUNT(CASE WHEN ig.created_at >= CURRENT_DATE THEN 1 END) as today_generations,
    SUM(CASE WHEN ct.transaction_type = 'SPEND' THEN ABS(ct.amount) ELSE 0 END) as total_credits_spent
FROM users u
LEFT JOIN image_generations ig ON u.id = ig.user_id
LEFT JOIN credit_transactions ct ON u.id = ct.user_id
GROUP BY u.id, u.uuid, u.credits, u.images_generated, u.created_at, u.last_seen_at;

-- ============================================
-- 9. 索引优化
-- ============================================

-- 复合索引优化查询性能
CREATE INDEX idx_image_generations_user_status_date ON image_generations(user_id, status, created_at);
CREATE INDEX idx_credit_transactions_user_type_date ON credit_transactions(user_id, transaction_type, created_at);
CREATE INDEX idx_users_credits_last_seen ON users(credits, last_seen_at);

-- ============================================
-- 10. 注释
-- ============================================

COMMENT ON TABLE users IS '用户信息表，存储用户基本信息、积分、统计数据等';
COMMENT ON TABLE credit_transactions IS '积分交易记录表，记录所有积分变动';
COMMENT ON TABLE image_generations IS '图像生成记录表，记录所有图像生成请求和结果';
COMMENT ON TABLE system_settings IS '系统配置表，存储系统级配置参数';
COMMENT ON TABLE daily_stats IS '每日统计表，记录系统运营数据';

COMMENT ON COLUMN users.user_identifier IS '复合用户标识，用于去重和防刷';
COMMENT ON COLUMN users.fingerprint IS '浏览器指纹，用于识别设备';
COMMENT ON COLUMN users.daily_generation_count IS '当日生成次数，每日重置';
COMMENT ON COLUMN credit_transactions.balance_after IS '交易后的积分余额';
COMMENT ON COLUMN image_generations.credits_cost IS '本次生成消耗的积分';
COMMENT ON COLUMN image_generations.was_refunded IS '生成失败时是否已退还积分';